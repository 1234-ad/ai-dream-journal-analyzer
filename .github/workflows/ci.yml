name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', '3.11']

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black isort
    
    - name: Lint with flake8
      run: |
        # Stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        # Exit-zero treats all errors as warnings
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
    
    - name: Check code formatting with black
      run: |
        black --check --diff .
    
    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .
    
    - name: Run tests with pytest
      run: |
        python -m pytest test_app.py -v --cov=utils --cov-report=xml --cov-report=html
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  security-scan:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
    
    - name: Run Bandit security scan
      run: |
        bandit -r . -f json -o bandit-report.json || true
    
    - name: Run Safety check
      run: |
        safety check --json --output safety-report.json || true
    
    - name: Upload security reports
      uses: actions/upload-artifact@v3
      with:
        name: security-reports
        path: |
          bandit-report.json
          safety-report.json

  build-and-test-app:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Test Streamlit app startup
      run: |
        timeout 30s streamlit run app.py --server.headless true --server.port 8501 &
        sleep 10
        curl -f http://localhost:8501 || exit 1
        pkill -f streamlit
    
    - name: Test app functionality
      run: |
        python -c "
        import sys
        sys.path.append('.')
        from utils import DataValidator, AdvancedAnalyzer
        
        # Test basic functionality
        validator = DataValidator()
        analyzer = AdvancedAnalyzer()
        
        # Test validation
        is_valid, msg = validator.validate_dream_text('This is a test dream about flying.')
        assert is_valid, f'Validation failed: {msg}'
        
        # Test analysis
        result = analyzer.analyze_dream_complexity('I was flying over mountains.')
        assert 'complexity_score' in result, 'Analysis failed'
        
        print('✅ App functionality tests passed!')
        "

  deploy-docs:
    runs-on: ubuntu-latest
    needs: [test, build-and-test-app]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to GitHub Pages
      uses: peaceiris/actions-gh-pages@v3
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }}
        publish_dir: ./docs
        publish_branch: gh-pages
        
  notify:
    runs-on: ubuntu-latest
    needs: [test, security-scan, build-and-test-app]
    if: always()
    
    steps:
    - name: Notify on success
      if: ${{ needs.test.result == 'success' && needs.build-and-test-app.result == 'success' }}
      run: |
        echo "✅ All tests passed! Ready for deployment."
    
    - name: Notify on failure
      if: ${{ needs.test.result == 'failure' || needs.build-and-test-app.result == 'failure' }}
      run: |
        echo "❌ Tests failed! Please check the logs."
        exit 1